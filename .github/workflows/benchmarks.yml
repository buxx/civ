name: Benchmarks
on:
  push:
    branches:
      - main

permissions:
  contents: write
  deployments: write

jobs:
  benchmark:
    name: Run and collect benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup toolchain update nightly && rustup default nightly
      - name: Run benchmark
        run: cargo +nightly bench --bench tasks --bench index -- --output-format bencher | tee output.txt
      # Download previous benchmark result from cache (if exists)
      - name: Download previous benchmark data
        uses: actions/cache@v4
        with:
          path: ./cache
          key: ${{ runner.os }}-benchmark
      # Run action
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          # What benchmark tool the output.txt came from
          tool: 'cargo'
          # Where the output from the benchmark tool is stored
          output-file-path: output.txt
          # Workflow will fail when an alert happens
          fail-on-alert: true
          # GitHub API token to make a commit comment
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Enable alert commit comment
          comment-on-alert: true
          # Enable Job Summary for PRs
          summary-always: true
          # Mention @buxx in the commit comment
          alert-comment-cc-users: '@buxx'
          # Push and deploy GitHub pages branch automatically
          auto-push: true
      - uses: bencherdev/bencher@main
      - name: Track base branch benchmarks with Bencher
        run: |
          bencher run \
            --file output.txt \
            --project civ \
            --token '${{ secrets.BENCHER_API_TOKEN }}' \
            --adapter rust_criterion \
            --github-actions '${{ secrets.GITHUB_TOKEN }}' \
            --branch main \
            --testbed ubuntu-latest \
            --threshold-measure latency \
            --threshold-test t_test \
            --threshold-max-sample-size 64 \
            --threshold-upper-boundary 0.99 \
            --thresholds-reset \
            --err